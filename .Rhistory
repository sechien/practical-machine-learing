1-0,056
1-0.056
fit <- glm(count ~ spray, data = InsectSprays, family = poisson)
exp(coef(fit))[2]
1- (1.057471)
-0.057471+1
relevel(spray, "B")
fit <- glm(count ~ relevel(spray, "B"), data = InsectSprays, family = poisson)
exp(coef(fit))[2]
data("mtcars")
head(mtcars)
?mtcars
str(mtcars)
boxplot(mpg~am, data = mtcars,
xlab = "transmission type",
ylab = "MPG",
main = "difference in MPG between transmission type")
simple.fit <- lm(mpg~am, data = mtcars)
simple.fit
summary(simple.fit)
?mtcars
multi.fit <- lm(mpg~ am+wt+hp, data = mtcars)
summary(multi.fit)
multi.fit <- lm(mpg~ am+wt+hp -1, data = mtcars)
summary(multi.fit)
plot(multi.fit)
par(mfrow = c(2,2))
plot(multi.fit)
?mtcars
install.packages("kernlab")
install.packages("caret")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
AlzData <- data(AlzheimerDisease)
head(AlzData)
AlzData
AlzheimerDisease
library(caret)
library(ggplot2)
library(kattice)
library(lattice)
library(caret)
install.packages("caret")
library(caret)
version
library(AppliedPredictiveModeling)
adData <- data(AlzheimerDisease)
asData
adData
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
install.packages("quantreg")
library(caret)
install.packages("installr")
version
library(caret)
install.packages("pbkrtest")
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
library(caret)
library(ggplot2)
library(caret)
library(Hmisc)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
library(Hmisc)
?cut2
head(traning$Cement)
head(training$Cement)
cut2(training$Cement)
qplot(training$CompressiveStrength,  colour=cut2(training$FlyAsh), data = training)
plot(training$CompressiveStrength,  colour=cut2(training$FlyAsh), data = training)
?plot
qplot(training[,0], training$CompressiveStrength,  colour=cut2(training$FlyAsh), data = training)
training[1,]
training[,1]
training[,0]
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,  colour=cut2(training$FlyAsh), data = training)
head(training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,  colour=cut2(training$Cement), data = training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,  colour=cut2(training$BlastFurnaceSlag), data = training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,  colour=cut2(training$Water), data = training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,  colour=cut2(training$Superplasticizer), data = training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,  colour=cut2(training$CoarseAggregate), data = training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,  colour=cut2(training$FineAggregate), data = training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,  colour=cut2(training$Age), data = training)
qplot(seq_along(training$CompressiveStrength),training$CompressiveStrength,  colour=cut2(training$FlyAsh), data = training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
loghistdata <- log(training$Superplasticizer)
hist(loghistdata)
loghistdata <- log(training$Superplasticizer+1)
hist(loghistdata)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
raining = adData[trainIndex,]
testing = adData[-trainIndex,]
training = adData[inTrain,]
testing = adData[-inTrain,]
training = adData[inTrain,]
head(adData)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
training <- adData[inTrain]
[[1]]training = adData[ inTrain,]
[1]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4, list = FALSE)
training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
modFit <- train(diagnosis ~ ., method = "glm", data = new_training)
modfit <- train(diagnosis ~ ., data=new_training, method="glm")
install.packages('e1071', dependencies=TRUE)
modfit <- train(diagnosis ~ ., data=new_training, method="glm")
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
suppressMessages(library(dplyr))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
names(new_testing)
finMod <- modfit$finalModel
finMod
printf(finMod)
print(finMod)
new_testing[, 13], predict(non_pca_model, new_testing[, -13])
confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
confusionMatrix(new_testing[, 13], predict(modfit, new_testing[, -13]))
pc_training_obj <- preProcess(new_training[, -13], method=c('center', 'scale', 'pca'), thresh=0.8)
pc_training_obj <- preProcess(new_training[, -13], method="pca", thresh=0.9)
pc_training_obj
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
glmfit <- train(diagnosis ~ ., data=new_training, method="glm")
confusionMatrix(new_testing$diagnosis, predict(glmfit, new_testing))
pcafit <- train(diagnosis ~ ., data=new_training, method="glm", preProcess="pca")
confusionMatrix(new_testing$diagnosis, predict(pcafit, new_testing))
pc_training_obj <- preProcess(new_training[, -13], method="pca", thresh=0.8)
pcaobj <- preProcess(new_training[, -13], method="pca", thresh=0.8)
testPCA <- predict(pcaobj, new_testing)
trainPCA <- predict(pcaobj, new_training)
pcafit <- train(new_training$diagnosis ~., method="glm",data = trainPCA)
testPCA <- predict(pcaobj, new_testing)
confusionMatrix(new_testing$diagnosis, predict(pcafit,testPCA))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.6, list=FALSE)
head(inTrain)
modfit <- train(Case ~., method ="rpart", data = training)
modfit <- train(class ~., method ="rpart", data = training)
modfit <- train(Class ~., method ="rpart", data = training)
modFit <- train(Class ~ ., method = "rpart", data = training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
suppressMessages(library(caret))
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
modfit <- train(Class ~., method ="rpart", data = training)
modFit$finalModel
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
install.packages("rpart.plot")
suppressMessages(library(rattle))
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
data(olive)
head(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
tainingModel <- train(Area ~., method = "rpart", data = olive)
predict(tainingModel, newdata = newdata)
newdata = as.data.frame(t(colMeans(olive)))
newdata = as.data.frame(t(colMeans(olive)))
predict(tainingModel, newdata = newdata)
head(newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
trainingModel <-train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(trainingModel, newdata = testSA))
missClass(testSA$chd, predict(trainingModel, newdata = trainSA))
missClass(trainSA$chd, predict(trainingModel, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
rfmodel <- randomForest(y ~., data = vowel.train)
varImp(modvowel)
varImp(rfmodel)
importaince <- varImp(rfmodel)
order(varImp(rfmodel))
install.packages("forecast")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
install.packages("gbm")
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
head(vowel.train)
str(vowel.train)
rfFit <- train(y ~., data =vowel.test, method = "rf")
gbmFit <- train(y ~., data =vowel.tesr, method = "gbm")
gbmFit <- train(y ~., data =vowel.test, method = "gbm")
rfPredict <- predict(rfFit, newdata = vowel.test)
gbmPredict <- predict(gbmFit, newdata = vowel.test)
preDF <- data.frame(rfPredict, gbmFit, y = vowel.test$y)
preDF <- data.frame(rfPredict, gbmFit, y = vowel.test$y)
DF_combined <- data.frame(rfPredict, gbmPredict, y = vowel.test$y)
preDF <- data.frame(rfPredict, gbmPredict, y = vowel.test$y)
combined_fit <- train(y ~ ., data = preDF, method = "gam")
combinedPredict <- predict(combined_fit, newdata = vowel.test)
rfResult <- confusionMatrix(rfPredict, vowel.test$y)
gbmResult <- confusionMatrix(gbmPredict, vowel.test$y)
combinedResult <- confusionMatrix(combinedPredict, preDF$y)
confusionMatrix(vowel.test$y, rfPredict)$overall['Accuracy']
confusionMatrix(vowel.test$y, rfPredict)$overall['Accuracy']
confusionMatrix(rfPredict, vowel.test$y)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
# load q1 data
data(vowel.train)
data(vowel.test)
set.seed(33833)
# set y as factor
#vowel.train$y <- as.factor(vowel.train$y)
#vowel.test$y <- as.factor(vowel.test$y)
# fit with random forest and gbm
rfFit <- train(y ~., data =vowel.test, method = "rf")
gbmFit <- train(y ~., data =vowel.test, method = "gbm")
# predict
rfPredict <- predict(rfFit, newdata = vowel.test)
gbmPredict <- predict(gbmFit, newdata = vowel.test)
# predict with combining predictors
# create dataframe
preDF <- data.frame(rfPredict, gbmPredict, y = vowel.test$y)
combined_fit <- train(y ~ ., data = preDF, method = "gam")
combinedPredict <- predict(combined_fit, newdata = vowel.test)
confusionMatrix(rfPredict, vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
suppressMessages(library(caret))
set.seed(33833)
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
rf.result <- predict(rfmodel, vowel.test)
gbm.result <- predict(gbmmodel, vowel.test)
confusionMatrix(vowel.test$y, rf.result)$overall['Accuracy']
confusionMatrix(vowel.test$y, rfPredict)
rfFit <- train(y ~., data =vowel.train, method = "rf")
gbmFit <- train(y ~., data =vowel.train, method = "gbm")
rfResult <- predict(rfFit, newdata = vowel.test)
confusionMatrix(rfResult, vowel.test$y)
confusionMatrix(rfResult, vowel.test$y)$overall['Accuracy']
confusionMatrix(gbmResult, vowel.test$y)$overall['Accuracy']
gbmPredict <- predict(gbmFit, newdata = vowel.test)
confusionMatrix(gbmResult, vowel.test$y)$overall['Accuracy']
confusionMatrix(gbmPredict, vowel.test$y)$overall['Accuracy']
preDF <- data.frame(rfResult, gbmPredict, y = vowel.test$y)
combined_fit <- train(y ~ ., data = preDF, method = "gam")
combinedPredict <- predict(combined_fit, newdata = vowel.test)
confusionMatrix(combinedPredict, preDF$y)
confusionMatrix(combinedPredict, preDF$y)$overall['Accuracy']
confusionMatrix(combinedPredict, preDF$y)$overall['Accuracy']
preDF <- data.frame(rfResult, gbmPredict, y = vowel.test$y)
combined_fit <- train(y ~ ., data = preDF, method = "gam")
combinedPredict <- predict(combined_fit, newdata = vowel.test)
confusionMatrix(combinedPredict, preDF$y)$overall['Accuracy']
combinedPredict <- predict(combined_fit, newdata = preDF)
confusionMatrix(combinedPredict, preDF$y)$overall['Accuracy']
preDF <- data.frame(rfResult, gbmPredict, y = vowel.test$y)
combined_fit <- train(y ~ ., data = preDF, method = "gam")
combinedPredict <- predict(combined_fit, newdata = preDF)
confusionMatrix(combinedPredict, vowel.test$y)$overall['Accuracy']
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rf.model <- train(diagnosis~., data=training, method = "rf")
rf.gbm <- train(diagnosis~., data=training, method = "gbm")
rf.lda <- train(diagnosis~., data=training, method = "lda")
gbm.model <- train(diagnosis~., data=training, method = "gbm")
lda.model <- train(diagnosis~., data=training, method = "lda")
gbmResult <- predict(gbm.model, testing)
ldaResult <- predict(lad.model, testing)
ldaResult <- predict(lda.model, testing)
combined.data <- data.frame(rfResult, gbmResult, ldaResult, diagnosis = testing$diagnosis)
combined.model <- train(diagnosis ~., data = combined.data, method = "rf")
combined.data <- data.frame(rfResult, gbmResult, ldaResult, diagnosis = testing$diagnosis)
rfResult <- predict(rf.model, testing)
gbmResult <- predict(gbm.model, testing)
ldaResult <- predict(lda.model, testing)
combined.data <- data.frame(rfResult, gbmResult, ldaResult, diagnosis = testing$diagnosis)
combined.model <- train(diagnosis ~., data = combined.data, method = "rf")
combinedResult  <- predict(combined.model, testing)
confusionMatrix(testing$diagnosis, rfResult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, gbmResult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, ldaResult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, combinedResult)$overall['Accuracy']
plot.enet(lassoFit$finalModel, xvar="penalty", use.color=TRUE)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lassoFit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lassoFit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
plot.enet(lassoFit$finalModel, xvar="penalty", use.color=TRUE)
dat = read.csv("~/CSE/R/practical machine learing/gaData.csv")
dat = read.csv("~/R/practical machine learing/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
head(tstrain)
mod <- bats(tstrain)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
acc
results <- c(accsvm[2], accsvmRadial[2], accsvmLinear[2], accsvmPoly[2], accsvmRadial[2], accsvmRadialCost[2])
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
mod_svm <- train(CompressiveStrength ~ ., data = training, method = "svm")
set.seed(325)
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
setwd("~/R/practical machine learing")
library(caret)
library(rattle)
Sys.setlocale("LC_TIME", "en_US.UTF-8")
library(rpart)
library(rpart.plot)
library(randomForest)
library(repmis)
library(ggplot2)
install.packages("repmis")
library(ggplot2)
head(training)
training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
head(training)
testing <- read.csv("pml-testing.csv", na.strings = c("NA", ""))
str(training)
head(testing)
str(testing)
training <- training[, colSums(is.na(training)) == 0]
testing <- testing[, colSums(is.na(testing)) == 0]
training=training[,-c(1:7)]
testing=testing[,-c(1:7)]
dim(training)
inTrain <- createDataPartition(trainData$classe, p = 0.7, list = FALSE)
inTrain <- createDataPartition(training$classe, p = 0.7, list = FALSE)
subtrainingData <- trainData[inTrain, ]
subtrainingData <- training[inTrain, ]
validationData <- training[-inTrain, ]
?colSums
rfFit <- train(classe ~ ., data = subtrainingData, method = "rf",
trControl = control)
rfFit <- train(classe ~ ., data = subtrainingData, method = "rf")
